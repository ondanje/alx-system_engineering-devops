What happens when you type google.com in your browser and press Enter

In today's world, we access the internet almost on a daily basis whereby we interact with our browsers and request for something and it responds with the content of what we had requested. The browser actually sends http requests to the specific server that has been identified to contain the resources requested. In this blog, I‚Äôll try to explain the detailed events of what happens when you type something on the browser i.e google.com and press enter. I will base the blog on these main elements :
DNS request
TCP/IP
Firewall
HTTPS/SSL
Load-balancer
Web server
Application server
Database

DNS request
After typing and pressing enter, the browser initiates a series of steps to translate the human-readable domain name into the corresponding IP address required to establish a connection with the web server since computers on the internet communicate using ip addresses and each computer has a unique ip address. During the DNS request, multiple processes are executed:
 Local Cache Check- In this step , the browser first checks its local cache to see if it has the IP address for the requested domain locally. Both browser and operating systems store DNS information locally for a certain period of time to speed up subsequent requests
Router Cache- If the operating system cache doesn't contain the necessary information, the request is forwarded to the local router, which may have its own DNS cache.
Recursive DNS Server- If the information required is not found in the local cache, the request is sent to a recursive DNS server. This server plays a crucial role in the DNS resolution process, seeking out the authoritative DNS server for the requested domain.
TLD DNS Servers-The root DNS servers guide the recursive server to the TLD DNS server for the specific top-level domain of the requested site (e.g., ".com" for "google.com").
Authoritative DNS Server- The TLD DNS server directs the recursive server to the authoritative DNS server for "google.com." This server holds the most recent IP address information.
IP Address Retrieval- The authoritative DNS server provides the IP address of "google.com" back to the recursive DNS server.
Response to the Browser- Finally, the recursive DNS server sends the IP address back to the operating system, and subsequently, to the browser. The browser can now use this IP address to establish a connection with the web server.

TCP/IP
Is a suite of communication protocols that form the backbone of the Internet and many private networks. It provides a set of rules for how computers communicate over a network and has become the standard protocol for networking.

Now armed with the IP address obtained through DNS, the browser can initiate a connection to the web server hosting "google.com" using the TCP/IP protocol suite. TCP uses the Three-Way Handshake to establish a reliable connection between the browser and the server containing the resources/content or the server that is referenced with the obtained IP address from the DNS.

The handshake involves the following steps:
a.SYN (Synchronize):
The browser sends a TCP packet to the web server with the SYN (synchronize) flag set. This packet includes the initial sequence number (ISN), which is a random value generated by the browser.

b.SYN-ACK (Synchronize-Acknowledge):
The web server, upon receiving the SYN packet, responds with a SYN-ACK packet. It acknowledges the receipt of the SYN packet and sends its own ISN.

c.ACK (Acknowledge):
Finally, the browser sends an ACK packet back to the web server. This packet acknowledges the receipt of the SYN-ACK packet, and the connection is established.

Firewall
A firewall is a network security device that monitors incoming and outgoing network traffic and decides whether to allow or block specific traffic based on a defined set of security rules.

If the server being accessed is located behind a firewall, The firewall checks the incoming request to make sure it is allowed based on its security rules. The specific security rules that firewalls check can vary depending on the type of firewall and its configuration, but common elements include:  Source and Destination IP Addresses, Protocol Type,  port numbers etc.




HTTPS/SSL
HTTPS (Hypertext Transfer Protocol Secure) and SSL (Secure Sockets Layer) are cryptographic protocols that work together to provide a secure communication channel over the Internet. HTTPS is essentially the secure version of HTTP. The HTTPS requests and responses are encrypted, which ensure the users that their data can‚Äôt be stolen or used by third-parties. For example, if we put our credit card information in a website that uses HTTPS, we are guaranteed that this info is not going to be stored in plain text somewhere accessible to anybody.

SSL certificate. SSL stands for Secure Sockets Layer (also known as TSL, Transport Layer Security). The certificate needs to be issued from a trusted Certificate Authority, like the famous Let‚Äôs Encrypt for example, which gives free SSL certificates. When a website has this certificate, we‚Äôre able to see a little lock icon next to the website name in the search bar.

When your browser establishes a connection with Google's server using HTTPS, your browser and Google's server first agree on the version of SSL/TLS to use and then create a secure, encrypted channel for transmitting the data

Load-balancer
A load balancer is a device that sits between the user and the server group and acts as an invisible facilitator, ensuring that all resource servers are used equally. For most websites where the traffic is consequent like the ‚Äúgoogle.com‚Äù that we are trying to access, it would be impossible to be hosted on a single server. Plus, it would create a Single Point of Failure (SPOF), because it would only need one attack on said server to take the whole site down.

HAproxy is a very famous load-balancer, and example of algorithms that we can use are the round-robin, which distributes the requests alternating between all the servers evenly and consequentially, or the least-connection, which distributes requests depending on the current server loads. In the case of a browser trying to access ‚Äúgoogle.com‚Äù, the load balancer would receive the incoming request from the browser and then forward it to one of the servers in the Google server network

Web server
Web server can refer to both the hardware and the software i.e On the hardware side, a web server is a computer that stores web server software and a website's component files (for example, HTML documents, images, CSS stylesheets, and JavaScript files). A web server connects to the Internet and supports physical data interchange with other devices connected to the web while , on the software side, a web server includes several parts that control how web users access hosted files. At a minimum, this is an HTTP server. Examples of web servers are Nginx or Apache. The web server is responsible for finding where the static content corresponding to the address asked for is living, and for serving it as an HTTP, or HTTPS response.

This means that when trying to access google.com, Google's server will receive a request from the load balancer. The web server would then process the request and generate a response, which would typically include the HTML, CSS, and JavaScript files that make up the web page.

The web server would then send this response back to the load balancer, which would forward it onto the browser. The browser would then use the HTML, CSS, and JavaScript files to render the web page for the user.

Application server
Having a web server is the basis of any web page. But most sites don‚Äôt just want a static page where no interaction is happening, and most websites are dynamic. That means that it‚Äôs possible to interact with the site, save information into it, log in with a user name and a password, etc.

When you submit a search query to Google, the request is first sent to the load balancer, which forwards it to one of the web servers in the Google server network. The web server then sends the request to the application server, which processes the request and generates the search results

Database
The last step is the database. A database is a collection of data, and the DBMS is the program that is going to interact with the database and retrieve, add, modify data in it. There are several types of database models. The two main ones are relational databases, and non-relational databases. A relational database can be seen as a collection of tables representing objects, where each column is an attribute and each row is an instance of that object. Depending on the complexity of the search query, the application server may need to make a request to a database in order to retrieve the necessary data.

Conclusion
The above explanation tries to explain the steps that happen when a request is made to a server in this case https request : google.com. The article covers right from the dns lookup up to the last step whereby items are fetched from the database. I hope it tries to make sense and make your understanding better üòÇ
